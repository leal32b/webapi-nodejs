@startuml Component Diagram | Sign up
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
  !define FA https://raw.githubusercontent.com/plantuml/plantuml-stdlib/master/tupadr3/font-awesome-5
  !define LOGOS https://raw.githubusercontent.com/plantuml/plantuml-stdlib/master/logos
  !include LOGOS/postgresql.puml
  !include LOGOS/nodejs.puml
  !include LOGOS/rabbitmq.puml

  AddRelTag("async", $lineStyle = DashedLine())

  SHOW_PERSON_PORTRAIT()

  Person(user, "User")
  System_Ext(front, "Webapp", "Frontend application")
  System_Ext(emailSystem, "E-mail System", "E-mail system")

  System_Boundary(webapi, "webapi-nodejs") {
    Boundary(identityModule, "Identity", "module") {
      Component(signUpController, "SingUpController", "controller")
      Component(signUpUseCase, "SingUpUseCase", "use-case")
      Component(hasher, "Hasher", "cryptography")
      Component(encrypter, "Encrypter", "cryptography")
      Component(userRepository, "UserRepository", "repository")
    }

    Boundary(communicationModule, "Communication", "module") {
      Component(userCreatedHandler, "userCreatedHandler", "handler")
      Component(sendEmailConfirmationEmailUseCase, "SendEmailConfirmationEmailUseCase", "use-case")
      Component(templateCompiler, "TemplateCompiler", "compiler")
      Component(translator, "Translator", "localization")
      Component(emailSender, "EmailSender", "communication")
    }

    ContainerDb(persistence, "persistence", "postgres", "application persistence", $sprite="postgresql")
    ContainerQueue(userCreatedTopic, "userCreatedTopic", "rabbitmq", "userCreated topic", $sprite="rabbitmq")
    ContainerQueue(userCreatedQueue, "userCreatedQueue", "rabbitmq", "userCreated queue", $sprite="rabbitmq")
  }

  Rel(user, front, "1.1. Signs up", "https/json")
  Rel(front, signUpController, "1.2. Signs up an user", "https/json")
  Rel(signUpController, signUpUseCase, "1.3. Executes", $tags="async")
  Rel(signUpUseCase, hasher, "1.4. hashes the password", $tags="async")
  Rel(signUpUseCase, encrypter, "1.5. creates a token", $tags="async")
  Rel(signUpUseCase, userRepository, "1.6. creates an User", $tags="async")
  Rel(userRepository, persistence, "1.7. Creates an user", "SQL/TCP", $tags="async")
  Rel(userRepository, userCreatedTopic, "1.8. Emmit userCreated event", "amqp", $tags="async")

  Rel(userCreatedQueue, userCreatedTopic, "2.1. Subscribes to", "amqp", $tags="async")
  Rel(userCreatedHandler, userCreatedQueue, "2.2. Handles userCreated event", "amqp", $tags="async")
  Rel(userCreatedHandler, sendEmailConfirmationEmailUseCase, "2.3. Executes", $tags="async")
  Rel(sendEmailConfirmationEmailUseCase, templateCompiler, "2.4. Compiles the template")
  Rel(templateCompiler, translator, "2.5. Uses")
  Rel(sendEmailConfirmationEmailUseCase, emailSender, "2.6. Sends the e-mail", $tags="async")
  Rel(emailSender, emailSystem, "2.7. Sends the e-mail", "smtp", $tags="async")

  SHOW_LEGEND()
@enduml
